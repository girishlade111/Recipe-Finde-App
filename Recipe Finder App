<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Recipe Finder</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f0f2f5; /* Light gray background */
        }
        .recipe-card {
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }
        .recipe-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
        }
        .modal {
            display: none; /* Hidden by default */
            position: fixed;
            z-index: 100;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            overflow: auto;
            background-color: rgba(0,0,0,0.6); /* Dim background */
            padding-top: 60px;
        }
        .modal-content {
            background-color: #fefefe;
            margin: 5% auto;
            padding: 20px;
            border: 1px solid #888;
            width: 80%;
            max-width: 700px;
            border-radius: 10px;
            position: relative;
        }
        .close-button {
            color: #aaa;
            float: right;
            font-size: 28px;
            font-weight: bold;
            position: absolute;
            top: 10px;
            right: 20px;
        }
        .close-button:hover,
        .close-button:focus {
            color: black;
            text-decoration: none;
            cursor: pointer;
        }
        .favorite-btn.active {
            background-color: #ef4444; /* Red for active favorite */
            color: white;
        }
        .loader {
            border: 8px solid #f3f3f3; /* Light grey */
            border-top: 8px solid #3498db; /* Blue */
            border-radius: 50%;
            width: 60px;
            height: 60px;
            animation: spin 1s linear infinite;
            margin: 20px auto;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        /* Custom scrollbar for recipe details */
        .recipe-instructions-container::-webkit-scrollbar {
            width: 8px;
        }
        .recipe-instructions-container::-webkit-scrollbar-track {
            background: #f1f1f1;
            border-radius: 10px;
        }
        .recipe-instructions-container::-webkit-scrollbar-thumb {
            background: #888;
            border-radius: 10px;
        }
        .recipe-instructions-container::-webkit-scrollbar-thumb:hover {
            background: #555;
        }
    </style>
</head>
<body class="bg-gray-100 text-gray-800">

    <header class="bg-gradient-to-r from-green-500 to-blue-500 text-white p-6 shadow-md">
        <div class="container mx-auto">
            <h1 class="text-3xl font-bold text-center">Recipe Finder</h1>
        </div>
    </header>

    <main class="container mx-auto p-4 md:p-6">
        <section id="filters" class="mb-8 p-6 bg-white rounded-lg shadow-lg">
            <h2 class="text-2xl font-semibold mb-4 text-gray-700">Find Your Perfect Recipe</h2>
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                <div>
                    <label for="search-name" class="block text-sm font-medium text-gray-600 mb-1">Search by Name:</label>
                    <input type="text" id="search-name" placeholder="e.g., Chicken Curry" class="w-full p-2 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500">
                </div>

                <div>
                    <label for="category-cuisine-filter" class="block text-sm font-medium text-gray-600 mb-1">Category / Cuisine:</label>
                    <select id="category-cuisine-filter" class="w-full p-2 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500">
                        <option value="">All Categories/Cuisines</option>
                        <option value="Breakfast" data-type="category">Breakfast</option> 
                        <option value="American" data-type="cuisine">American</option>
                        <option value="British" data-type="cuisine">British</option>
                        <option value="Canadian" data-type="cuisine">Canadian</option>
                        <option value="Chinese" data-type="cuisine">Chinese</option>
                        <option value="Dutch" data-type="cuisine">Dutch</option>
                        <option value="Egyptian" data-type="cuisine">Egyptian</option>
                        <option value="French" data-type="cuisine">French</option>
                        <option value="Greek" data-type="cuisine">Greek</option>
                        <option value="Indian" data-type="cuisine">Indian</option>
                        <option value="Irish" data-type="cuisine">Irish</option>
                        <option value="Italian" data-type="cuisine">Italian</option>
                        <option value="Jamaican" data-type="cuisine">Jamaican</option>
                        <option value="Japanese" data-type="cuisine">Japanese</option>
                        <option value="Kenyan" data-type="cuisine">Kenyan</option>
                        <option value="Malaysian" data-type="cuisine">Malaysian</option>
                        <option value="Mexican" data-type="cuisine">Mexican</option>
                        <option value="Moroccan" data-type="cuisine">Moroccan</option>
                        <option value="Polish" data-type="cuisine">Polish</option>
                        <option value="Portuguese" data-type="cuisine">Portuguese</option>
                        <option value="Russian" data-type="cuisine">Russian</option>
                        <option value="Spanish" data-type="cuisine">Spanish</option>
                        <option value="Thai" data-type="cuisine">Thai</option>
                        <option value="Tunisian" data-type="cuisine">Tunisian</option>
                        <option value="Turkish" data-type="cuisine">Turkish</option>
                        <option value="Vietnamese" data-type="cuisine">Vietnamese</option>
                        {/* Add other categories from TheMealDB if needed e.g. Dessert, Seafood, etc. */}
                    </select>
                </div>

                <div>
                    <label class="block text-sm font-medium text-gray-600 mb-1">Dietary Needs:</label>
                    <div class="flex flex-wrap gap-2">
                        <button id="vegan-filter" data-diet="vegan" class="diet-btn px-3 py-2 text-sm border border-gray-300 rounded-md hover:bg-green-100">Vegan</button>
                        <button id="gluten-free-filter" data-diet="gluten-free" class="diet-btn px-3 py-2 text-sm border border-gray-300 rounded-md hover:bg-yellow-100">Gluten-Free</button>
                        <button id="clear-diet-filter" class="px-3 py-2 text-sm border border-gray-300 rounded-md hover:bg-gray-100">Clear Diet</button>
                    </div>
                </div>
                
                <div>
                    <label for="ingredient-filter" class="block text-sm font-medium text-gray-600 mb-1">Main Ingredient:</label>
                    <select id="ingredient-filter" class="w-full p-2 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500">
                        <option value="">Any Ingredient</option>
                        </select>
                </div>
            </div>
            <div class="mt-6 text-center">
                 <button id="search-button" class="bg-blue-600 hover:bg-blue-700 text-white font-semibold py-2 px-6 rounded-lg shadow-md transition duration-150 ease-in-out">Search Recipes</button>
                 <button id="show-favorites-button" class="ml-2 bg-red-500 hover:bg-red-600 text-white font-semibold py-2 px-6 rounded-lg shadow-md transition duration-150 ease-in-out">Show Favorites</button>
            </div>
        </section>

        <section id="raw-foods" class="my-8 p-6 bg-white rounded-lg shadow-lg">
            <h2 class="text-2xl font-semibold mb-4 text-gray-700">Available Raw Foods</h2>
            <p class="text-sm text-gray-500 mb-3">Select a primary ingredient below to populate the 'Main Ingredient' filter above.</p>
            <div id="raw-foods-list" class="flex flex-wrap gap-2">
                </div>
        </section>
        
        <div id="loader" class="loader" style="display: none;"></div>

        <section id="recipe-results" class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
            </section>
        <p id="no-results" class="text-center text-gray-500 text-xl mt-10" style="display: none;">No recipes found. Try adjusting your filters!</p>


        <div id="recipeModal" class="modal">
            <div class="modal-content shadow-2xl">
                <span class="close-button" id="closeModalButton">&times;</span>
                <div id="modal-body" class="text-gray-700">
                    </div>
            </div>
        </div>
    </main>

    <footer class="text-center p-4 mt-10 text-gray-600 text-sm">
        Recipe Finder App &copy; 2025. Powered by TheMealDB API.
    </footer>

    <script>
        // --- API Configuration ---
        const API_BASE_URL = 'https://www.themealdb.com/api/json/v1/1/';

        // --- DOM Elements ---
        const searchNameInput = document.getElementById('search-name');
        const categoryCuisineFilter = document.getElementById('category-cuisine-filter'); // Updated ID
        const ingredientFilter = document.getElementById('ingredient-filter');
        const veganFilterBtn = document.getElementById('vegan-filter');
        const glutenFreeFilterBtn = document.getElementById('gluten-free-filter');
        const clearDietFilterBtn = document.getElementById('clear-diet-filter');
        const searchButton = document.getElementById('search-button');
        const showFavoritesButton = document.getElementById('show-favorites-button');
        const recipeResultsContainer = document.getElementById('recipe-results');
        const rawFoodsListContainer = document.getElementById('raw-foods-list');
        const recipeModal = document.getElementById('recipeModal');
        const modalBody = document.getElementById('modal-body');
        const closeModalButton = document.getElementById('closeModalButton');
        const loader = document.getElementById('loader');
        const noResultsMsg = document.getElementById('no-results');

        // --- State ---
        let favorites = JSON.parse(localStorage.getItem('recipeFavorites')) || [];
        let currentDietFilter = null; // 'vegan', 'gluten-free', or null

        // --- Predefined Raw Foods/Ingredients for the filter ---
        const commonIngredients = [
            'Chicken', 'Salmon', 'Beef', 'Pork', 'Eggs', 'Tofu', // Proteins
            'Tomatoes', 'Onions', 'Garlic', 'Potatoes', 'Carrots', 'Broccoli', 'Spinach', 'Bell Peppers', // Vegetables
            'Rice', 'Pasta', 'Bread', 'Quinoa', // Grains/Starches
            'Milk', 'Cheese', 'Butter', // Dairy
            'Olive Oil', 'Salt', 'Pepper', 'Chilli', 'Coriander', 'Basil', 'Oregano' // Spices & Oils
        ];

        // --- API Fetch Functions ---
        async function fetchAPI(endpoint) {
            showLoader(true);
            try {
                const response = await fetch(`${API_BASE_URL}${endpoint}`);
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                const data = await response.json();
                showLoader(false);
                return data.meals; // TheMealDB nests recipes in 'meals' array
            } catch (error) {
                console.error('Error fetching recipes:', error);
                showLoader(false);
                noResultsMsg.textContent = 'Failed to fetch recipes. Please check your connection or try again later.';
                noResultsMsg.style.display = 'block';
                recipeResultsContainer.innerHTML = ''; // Clear previous results
                return null; // Return null on error
            }
        }
        
        // --- Recipe Display Functions ---
        function displayRecipes(recipes) {
            recipeResultsContainer.innerHTML = ''; // Clear previous results
            noResultsMsg.style.display = 'none';

            if (!recipes || recipes.length === 0) {
                noResultsMsg.textContent = 'No recipes found. Try adjusting your filters!';
                noResultsMsg.style.display = 'block';
                return;
            }
            
            let filteredRecipes = recipes; // Start with all recipes passed

            // Apply dietary filters if active
            // Note: This is a client-side filter after an initial fetch.
            // For APIs that support dietary filtering directly, it's better to use that.
            if (currentDietFilter) {
                // This is a placeholder for actual dietary filtering logic.
                // For a real app, `checkDietaryMatch` would need to be more robust,
                // possibly fetching full details for each recipe if not already available.
                filteredRecipes = recipes.filter(recipe => checkDietaryMatch(recipe, currentDietFilter));
                 if (filteredRecipes.length === 0) {
                    noResultsMsg.textContent = `No ${currentDietFilter} recipes found with the current criteria.`;
                    noResultsMsg.style.display = 'block';
                    return;
                }
            }

            filteredRecipes.forEach(recipe => {
                const isFavorite = favorites.some(fav => fav.idMeal === recipe.idMeal);
                const card = `
                    <div class="recipe-card bg-white rounded-lg shadow-md overflow-hidden cursor-pointer p-4 flex flex-col justify-between" data-id="${recipe.idMeal}">
                        <img src="${recipe.strMealThumb}" alt="${recipe.strMeal}" onerror="this.onerror=null;this.src='https://placehold.co/600x400/E2E8F0/AAAAAA?text=No+Image';" class="w-full h-48 object-cover rounded-md">
                        <div class="py-3">
                            <h3 class="text-lg font-semibold text-gray-800 mb-1 truncate" title="${recipe.strMeal}">${recipe.strMeal}</h3>
                            <p class="text-sm text-gray-600">${recipe.strArea ? recipe.strArea : 'Various'} | ${recipe.strCategory ? recipe.strCategory : 'General'}</p>
                        </div>
                        <button class="mt-auto w-full text-sm ${isFavorite ? 'bg-red-500 text-white' : 'bg-gray-200 text-gray-700'} hover:bg-red-300 py-2 px-3 rounded-md add-to-favorites" data-id="${recipe.idMeal}" data-name="${recipe.strMeal}" data-thumb="${recipe.strMealThumb}" data-area="${recipe.strArea || ''}" data-category="${recipe.strCategory || ''}">
                            ${isFavorite ? 'Remove from Favorites' : 'Add to Favorites'}
                        </button>
                    </div>
                `;
                recipeResultsContainer.innerHTML += card;
            });

            // Add event listeners to new cards
            document.querySelectorAll('.recipe-card').forEach(card => {
                card.addEventListener('click', (e) => {
                    if (!e.target.closest('.add-to-favorites')) { 
                        fetchRecipeDetails(card.dataset.id);
                    }
                });
            });
            document.querySelectorAll('.add-to-favorites').forEach(button => {
                button.addEventListener('click', (e) => {
                    e.stopPropagation(); 
                    toggleFavorite(button.dataset.id, button.dataset.name, button.dataset.thumb, button.dataset.area, button.dataset.category, button);
                });
            });
        }

        async function fetchRecipeDetails(id) {
            const meals = await fetchAPI(`lookup.php?i=${id}`);
            if (meals && meals[0]) {
                displayRecipeModal(meals[0]);
            }
        }

        function displayRecipeModal(recipe) {
            let ingredientsList = '';
            for (let i = 1; i <= 20; i++) {
                const ingredient = recipe[`strIngredient${i}`];
                const measure = recipe[`strMeasure${i}`];
                if (ingredient && ingredient.trim() !== '') {
                    ingredientsList += `<li class="mb-1">${measure} ${ingredient}</li>`;
                }
            }

            const isFavorite = favorites.some(fav => fav.idMeal === recipe.idMeal);

            modalBody.innerHTML = `
                <h2 class="text-3xl font-bold mb-4 text-gray-800">${recipe.strMeal}</h2>
                <img src="${recipe.strMealThumb}" alt="${recipe.strMeal}" onerror="this.onerror=null;this.src='https://placehold.co/600x400/E2E8F0/AAAAAA?text=No+Image';" class="w-full h-64 object-cover rounded-lg mb-4 shadow-md">
                <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
                    <div>
                        <h3 class="text-xl font-semibold mb-2 text-indigo-600">Ingredients:</h3>
                        <ul class="list-disc list-inside text-gray-600 space-y-1">${ingredientsList}</ul>
                    </div>
                    <div class="recipe-instructions-container max-h-80 overflow-y-auto pr-2">
                        <h3 class="text-xl font-semibold mb-2 text-indigo-600">Instructions:</h3>
                        <p class="text-gray-600 whitespace-pre-line leading-relaxed">${recipe.strInstructions}</p>
                    </div>
                </div>
                <div class="flex justify-between items-center mt-6 pt-4 border-t border-gray-200">
                    <div>
                        <p class="text-sm text-gray-500"><strong>Category:</strong> ${recipe.strCategory}</p>
                        <p class="text-sm text-gray-500"><strong>Cuisine:</strong> ${recipe.strArea}</p>
                        ${recipe.strTags ? `<p class="text-sm text-gray-500"><strong>Tags:</strong> ${recipe.strTags.split(',').join(', ')}</p>` : ''}
                    </div>
                    <button class="favorite-btn ${isFavorite ? 'active' : ''} py-2 px-4 rounded-lg font-semibold transition-colors duration-200 ${isFavorite ? 'bg-red-500 text-white' : 'bg-gray-200 text-gray-800 hover:bg-red-400 hover:text-white'}" data-id="${recipe.idMeal}" data-name="${recipe.strMeal}" data-thumb="${recipe.strMealThumb}" data-area="${recipe.strArea || ''}" data-category="${recipe.strCategory || ''}">
                        ${isFavorite ? '<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 inline mr-1" viewBox="0 0 20 20" fill="currentColor"><path fill-rule="evenodd" d="M3.172 5.172a4 4 0 015.656 0L10 6.343l1.172-1.171a4 4 0 115.656 5.656L10 17.657l-6.828-6.829a4 4 0 010-5.656z" clip-rule="evenodd" /></svg>Remove Favorite' : '<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 inline mr-1" viewBox="0 0 20 20" fill="currentColor"><path fill-rule="evenodd" d="M3.172 5.172a4 4 0 015.656 0L10 6.343l1.172-1.171a4 4 0 115.656 5.656L10 17.657l-6.828-6.829a4 4 0 010-5.656z" clip-rule="evenodd" /></svg>Add to Favorites'}
                    </button>
                </div>

            `;
            recipeModal.style.display = 'block';
            modalBody.querySelector('.favorite-btn').addEventListener('click', (e) => {
                const btn = e.currentTarget;
                toggleFavorite(btn.dataset.id, btn.dataset.name, btn.dataset.thumb, btn.dataset.area, btn.dataset.category, btn);
                const mainPageButton = recipeResultsContainer.querySelector(`.add-to-favorites[data-id="${btn.dataset.id}"]`);
                if (mainPageButton) {
                     updateFavoriteButtonUI(mainPageButton, favorites.some(fav => fav.idMeal === btn.dataset.id));
                }
            });
        }
        
        function toggleFavorite(id, name, thumb, area, category, buttonElement) {
            const recipeIndex = favorites.findIndex(fav => fav.idMeal === id);
            if (recipeIndex > -1) {
                favorites.splice(recipeIndex, 1); 
            } else {
                favorites.push({ idMeal: id, strMeal: name, strMealThumb: thumb, strArea: area, strCategory: category }); 
            }
            localStorage.setItem('recipeFavorites', JSON.stringify(favorites));
            updateFavoriteButtonUI(buttonElement, recipeIndex === -1); 

            if (buttonElement.classList.contains('favorite-btn')) { 
                 buttonElement.innerHTML = recipeIndex === -1 ? 
                    '<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 inline mr-1" viewBox="0 0 20 20" fill="currentColor"><path fill-rule="evenodd" d="M3.172 5.172a4 4 0 015.656 0L10 6.343l1.172-1.171a4 4 0 115.656 5.656L10 17.657l-6.828-6.829a4 4 0 010-5.656z" clip-rule="evenodd" /></svg>Remove Favorite' : 
                    '<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 inline mr-1" viewBox="0 0 20 20" fill="currentColor"><path fill-rule="evenodd" d="M3.172 5.172a4 4 0 015.656 0L10 6.343l1.172-1.171a4 4 0 115.656 5.656L10 17.657l-6.828-6.829a4 4 0 010-5.656z" clip-rule="evenodd" /></svg>Add to Favorites';
                buttonElement.classList.toggle('active', recipeIndex === -1);
            }
        }

        function updateFavoriteButtonUI(button, isFavorite) {
            if (button) {
                button.textContent = isFavorite ? 'Remove from Favorites' : 'Add to Favorites';
                if (isFavorite) {
                    button.classList.add('bg-red-500', 'text-white');
                    button.classList.remove('bg-gray-200', 'text-gray-700');
                } else {
                    button.classList.remove('bg-red-500', 'text-white');
                    button.classList.add('bg-gray-200', 'text-gray-700');
                }
            }
        }

        function displayFavoriteRecipes() {
            document.getElementById('filters').scrollIntoView({ behavior: 'smooth' }); 
            recipeResultsContainer.innerHTML = ''; 
            if (favorites.length === 0) {
                noResultsMsg.textContent = "You haven't saved any favorite recipes yet!";
                noResultsMsg.style.display = 'block';
                return;
            }
            noResultsMsg.style.display = 'none';
            displayRecipes(favorites.map(fav => ({ 
                idMeal: fav.idMeal,
                strMeal: fav.strMeal,
                strMealThumb: fav.strMealThumb,
                strArea: fav.strArea,
                strCategory: fav.strCategory
            })));
        }

        function checkDietaryMatch(recipe, diet) {
            // Placeholder: This function needs more robust logic for accurate dietary filtering.
            // For now, it's a very basic check.
            const name = recipe.strMeal.toLowerCase();
            const category = recipe.strCategory ? recipe.strCategory.toLowerCase() : "";

            if (diet === 'vegan') {
                if (name.includes('vegan') || category.includes('vegan')) return true;
                // A more robust check would involve fetching full ingredients and checking against a list of non-vegan items.
                if (category.includes('vegetarian') && !name.includes('egg') && !name.includes('cheese') && !name.includes('milk') && !name.includes('honey')) return true;
                return false; 
            }
            if (diet === 'gluten-free') {
                if (name.includes('gluten-free') || name.includes('gluten free')) return true;
                 // A more robust check would involve fetching full ingredients and checking against gluten-containing grains.
                return false; 
            }
            return true; 
        }

        function setActiveDietButton(diet) {
            veganFilterBtn.classList.remove('bg-green-400', 'text-white', 'ring-2', 'ring-green-500');
            glutenFreeFilterBtn.classList.remove('bg-yellow-400', 'text-white', 'ring-2', 'ring-yellow-500');
            currentDietFilter = diet;
            if (diet === 'vegan') {
                veganFilterBtn.classList.add('bg-green-400', 'text-white', 'ring-2', 'ring-green-500');
            } else if (diet === 'gluten-free') {
                glutenFreeFilterBtn.classList.add('bg-yellow-400', 'text-white', 'ring-2', 'ring-yellow-500');
            }
        }

        function showLoader(show) {
            loader.style.display = show ? 'block' : 'none';
        }

        searchButton.addEventListener('click', async () => {
            const searchTerm = searchNameInput.value.trim();
            const selectedCategoryCuisine = categoryCuisineFilter.value;
            const selectedOption = categoryCuisineFilter.options[categoryCuisineFilter.selectedIndex];
            const filterType = selectedOption ? selectedOption.dataset.type : null; // 'category' or 'cuisine'
            const selectedIngredient = ingredientFilter.value;
            
            let endpoint = '';

            if (searchTerm) {
                endpoint = `search.php?s=${encodeURIComponent(searchTerm)}`;
            } else if (selectedCategoryCuisine && filterType === 'category') { // Check if it's a category like Breakfast
                endpoint = `filter.php?c=${encodeURIComponent(selectedCategoryCuisine)}`;
            } else if (selectedCategoryCuisine && filterType === 'cuisine') { // Check if it's a cuisine
                endpoint = `filter.php?a=${encodeURIComponent(selectedCategoryCuisine)}`;
            } else if (selectedIngredient) {
                endpoint = `filter.php?i=${encodeURIComponent(selectedIngredient)}`;
            } else {
                endpoint = 'search.php?s='; // Default: fetches a variety, or you can set a specific default like 'Arrabiata'
            }
            
            const recipes = await fetchAPI(endpoint);
            displayRecipes(recipes); // Dietary filter will be applied client-side in displayRecipes
        });

        veganFilterBtn.addEventListener('click', () => {
            setActiveDietButton(currentDietFilter === 'vegan' ? null : 'vegan'); // Toggle on/off
            searchButton.click(); 
        });

        glutenFreeFilterBtn.addEventListener('click', () => {
            setActiveDietButton(currentDietFilter === 'gluten-free' ? null : 'gluten-free'); // Toggle on/off
            searchButton.click(); 
        });
        
        clearDietFilterBtn.addEventListener('click', () => {
            setActiveDietButton(null);
            searchButton.click(); 
        });

        showFavoritesButton.addEventListener('click', displayFavoriteRecipes);

        closeModalButton.addEventListener('click', () => {
            recipeModal.style.display = 'none';
        });

        window.addEventListener('click', (event) => {
            if (event.target === recipeModal) {
                recipeModal.style.display = 'none';
            }
        });

        function initializeRawFoods() {
            commonIngredients.forEach(ing => {
                const option = document.createElement('option');
                option.value = ing;
                option.textContent = ing;
                ingredientFilter.appendChild(option);
            });

            rawFoodsListContainer.innerHTML = ''; 
            commonIngredients.forEach(ing => {
                const button = document.createElement('button');
                button.classList.add('px-3', 'py-1', 'text-sm', 'border', 'border-gray-300', 'rounded-full', 'hover:bg-indigo-100', 'hover:border-indigo-300', 'transition-colors');
                button.textContent = ing;
                button.dataset.ingredient = ing;
                button.addEventListener('click', () => {
                    ingredientFilter.value = ing; 
                    // Clear other primary filters when a raw food is clicked for simplicity
                    searchNameInput.value = '';
                    categoryCuisineFilter.value = '';
                    setActiveDietButton(null);

                    searchButton.click();
                    document.getElementById('filters').scrollIntoView({ behavior: 'smooth' });
                });
                rawFoodsListContainer.appendChild(button);
            });
        }
        
        async function initialLoad() {
            initializeRawFoods();
            // Fetch some "Breakfast" recipes on initial load as an example
            const initialRecipes = await fetchAPI('filter.php?c=Breakfast'); 
            displayRecipes(initialRecipes);
        }

        document.addEventListener('DOMContentLoaded', initialLoad);

    </script>
</body>
</html>
